//https://leetcode.com/problems/number-of-enclaves/
public static int numEnclaves(int[][] grid) {
    // your code here
	  int m=grid.length;
	  int n=grid[0].length;
	  Queue<Pair>q=new LinkedList<>();
	  for(int i=0;i<m;i++){
		  if(grid[i][0]==1){
			  q.add(new Pair(i,0));
			  grid[i][0]=0;
		  }
		  if(grid[i][n-1]==1){
			  q.add(new Pair(i,n-1));
			  grid[i][n-1]=0;
		  }
	  }
	  for(int i=1;i<n-1;i++){
		  if(grid[0][i]==1){
			   q.add(new Pair(0,i));
			  grid[0][i]=0;
		  }
		  if(grid[m-1][i]==1){
			  q.add(new Pair(m-1,i));
			  grid[m-1][i]=0;
		  }
	  }
	  int[][]dir={{0,1},{0,-1},{1,0},{-1,0}};
	  while(q.size()>0){
		  Pair p=q.remove();
		  for(int i=0;i<4;i++){
			  int X=p.x+dir[i][0];
			  int Y=p.y+dir[i][1];
			  if(isValid(X,Y,grid)){
				  q.add(new Pair(X,Y));
				  grid[X][Y]=0;
			  }
		  }
	  }
	  int cnt=0;
	  for(int i=0;i<m;i++){
		  for(int j=0;j<n;j++){
			  if(grid[i][j]==1)cnt++;
		  }
	  }
	  return cnt;
  }
	private static boolean isValid(int x,int y,int[][]grid){
		int m=grid.length;
		int n=grid[0].length;
		if(x<0 ||x>=m||y<0||y>=n||grid[x][y]!=1) return false;
		return true;
	}
class Pair{
	int x;
	int y;
	Pair(int x,int y){
		this.x=x;
		this.y=y;
	}
}
