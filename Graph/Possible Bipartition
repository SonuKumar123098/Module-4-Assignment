//https://leetcode.com/problems/possible-bipartition/
class Solution {
public:
bool bfs(vector<int>adj[],vector<int>&color,int&node)
{
    queue<int>q;
    q.push(node);
    color[node]=1;        
    while(q.size())
    {
        
        int nod=q.front();
        q.pop();
        int colr=color[nod];
        
        for(int x:adj[nod])
        {
            if(color[x]==-1)
            {
                color[x]=1-colr;
                q.push(x);
            }
            else if(color[x]!=-1 and color[x]==colr)
            {
                return false;
            }
        }
    }
    return true;
}
    bool possibleBipartition(int n, vector<vector<int>>& dis) {
        vector<int>adj[n];
        vector<int>color(n,-1);

        for(int i=0;i<dis.size();i++)
        {
            adj[dis[i][0]-1].push_back(dis[i][1]-1);
            adj[dis[i][1]-1].push_back(dis[i][0]-1);
        }
        for(int i=0;i<n;i++)
        {
            if(color[i]==-1)
            {
               if(! bfs(adj,color,i))
               return false;
            }
        }
        return true;
    }
};



// 2nd approach using dfs in java acciojob assignment questions
class Solution {
   
    public int possibleBipartition(int n, int[][] dislikes) {
        // Write your code here
		ArrayList<Integer>[]adj=new ArrayList[n];
		for(int i=0;i<n;i++)adj[i]=new ArrayList<>();
		for(int[]x:dislikes){
			adj[x[0]-1].add(x[1]-1);
			adj[x[1]-1].add(x[0]-1);
		}
		int[]color=new int[n];
		for(int i=0;i<n;i++){
			if(color[i]==0)
			{
				if(!check(color,i,adj,1)) return 0;
			}
		}
		return 1;
    }
	private boolean check(int[]color, int i,ArrayList<Integer>[]adj,int c){
		color[i]=c;
		int nbrc=c==1?2:1;
		for(int nbr:adj[i]){
			if(color[nbr]==0){
				if(!check(color,nbr,adj,nbrc)) return false;
			}else{
				if(c==color[nbr]) return false;
			}
		}
		return true;
	}
}
